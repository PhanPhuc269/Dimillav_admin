<section class="product-list">
    <div class="container py-5">
        <h1 class="text-center mb-4">Product List</h1>

        <div class="row">
            <!-- Sidebar Filter -->
            <div class="col-lg-3 mb-4">
                <div class="card shadow-sm border-0">
                    <div class="card-header bg-primary text-white text-center">
                        <h5 class="mb-0">Filter Options</h5>
                    </div>
                    <div class="card-body">
                        <form id="filter-form" method="GET" action="/product/filter">
                            <!-- Search -->
                            <div class="mb-3">
                                <label for="keyword" class="form-label fw-bold">
                                    <i class="bi bi-search"></i> Search by Name:
                                </label>
                                <div class="input-group">
                                    <input type="text" class="form-control" id="keyword" name="keyword" placeholder="Search products..." value="{{keyword}}">
                                    <button class="btn btn-primary" type="submit">Search</button>
                                </div>
                            </div>

                            <!-- Categories -->
                            <div class="mb-3">
                                <label class="form-label fw-bold">
                                    <i class="bi bi-tags"></i> Categories:
                                </label>
                                <div class="d-flex flex-wrap gap-2">
                                    {{#each categories}}
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox" id="category-{{this}}" name="category" value="{{this}}" {{#if (includes ../formData.category this)}}checked{{/if}}>
                                            <label class="form-check-label" for="category-{{this}}">{{this}}</label>
                                        </div>
                                    {{/each}}
                                </div>
                            </div>

                            <!-- Brands -->
                            <div class="mb-3">
                                <label class="form-label fw-bold">
                                    <i class="bi bi-basket"></i> Brands:
                                </label>
                                <div class="d-flex flex-wrap gap-2">
                                    {{#each brands}}
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox" id="brand-{{this}}" name="brand" value="{{this}}" {{#if (includes ../formData.brand this)}}checked{{/if}}>
                                            <label class="form-check-label" for="brand-{{this}}">{{this}}</label>
                                        </div>
                                    {{/each}}
                                </div>
                            </div>

                            <button class="btn btn-success w-100 mt-3" type="submit">
                                <i class="bi bi-filter"></i> Apply Filters
                            </button>
                        </form>
                    </div>
                </div>
            </div>

            <!-- Main Content -->
            <div class="col-lg-9">
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <!-- Sort Dropdown -->
                    <div>
                        <div class="dropdown">
                            <button class="btn btn-outline-secondary dropdown-toggle" type="button" id="sortDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                                <i class="bi bi-arrow-down-up"></i> Sort By
                            </button>
                            <ul class="dropdown-menu" aria-labelledby="sortDropdown">
                                <li><a class="dropdown-item" href="?sort=creation_time_desc&keyword={{keyword}}">Creation Time (Newest)</a></li>
                                <li><a class="dropdown-item" href="?sort=creation_time_asc&keyword={{keyword}}">Creation Time (Oldest)</a></li>
                                <li><a class="dropdown-item" href="?sort=price_asc&keyword={{keyword}}">Price (Low to High)</a></li>
                                <li><a class="dropdown-item" href="?sort=price_desc&keyword={{keyword}}">Price (High to Low)</a></li>
                                <li><a class="dropdown-item" href="?sort=total_purchase_desc&keyword={{keyword}}">Total Purchase (High to Low)</a></li>
                                <li><a class="dropdown-item" href="?sort=total_purchase_asc&keyword={{keyword}}">Total Purchase (Low to High)</a></li>
                            </ul>
                        </div>
                    </div>
                </div>

                <!-- Product Cards -->
                {{#if products.length}}
                    <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
                        {{#each products}}
                            <div class="col">
                                <div class="card shadow-sm h-100 border-0">
                                    <img src="{{this.images.[1]}}" alt="{{this.name}}" class="card-img-top img-fluid">
                                    <div class="card-body">
                                        <h5 class="card-title text-primary">{{this.name}}</h5>
                                        <p class="card-text text-muted mb-1">Price: <span class="fw-bold">{{ formatPrice this.salePrice}}</span></p>
                                    </div>
                                    <div class="card-footer bg-light d-flex justify-content-between align-items-center">
                                        <a href="/product/update/{{this.slug}}" class="btn btn-outline-primary btn-sm">
                                            <i class="bi bi-pencil"></i> Edit
                                        </a>
                                        <form action="/product/delete/{{this.slug}}" method="POST" style="margin: 0;">
                                            <button type="submit" class="btn btn-outline-danger btn-sm">
                                                <i class="bi bi-trash"></i> Delete
                                            </button>
                                        </form>
                                    </div>
                                </div>
                            </div>
                        {{/each}}
                    </div>

                    <!-- Pagination -->
                    {{#if (gt totalPages 1)}}
                        <nav class="mt-5">
                            <ul class="pagination justify-content-center">
                                <!-- Previous Button -->
                                <li class="page-item {{#unless (gt currentPage 1)}}disabled{{/unless}}">
                                    <a class="page-link" href="?page={{sub currentPage 1}}&keyword={{keyword}}&category={{formData.category}}&brand={{formData.brand}}&sort={{sort}}" aria-label="Previous">
                                        <span aria-hidden="true">&laquo;</span>
                                    </a>
                                </li>

                                <!-- Page Numbers -->
                                {{#each (range 1 totalPages)}}
                                    <li class="page-item {{#if (eq this ../currentPage)}}active{{/if}}">
                                        <a class="page-link" href="?page={{this}}&keyword={{../keyword}}&category={{../formData.category}}&brand={{../formData.brand}}&sort={{../sort}}">{{this}}</a>
                                    </li>
                                {{/each}}

                                <!-- Next Button -->
                                <li class="page-item {{#unless (lt currentPage totalPages)}}disabled{{/unless}}">
                                    <a class="page-link" href="?page={{add currentPage 1}}&keyword={{keyword}}&category={{formData.category}}&brand={{formData.brand}}&sort={{sort}}" aria-label="Next">
                                        <span aria-hidden="true">&raquo;</span>
                                    </a>
                                </li>
                            </ul>
                        </nav>
                    {{/if}}
                {{else}}
                    <div class="alert alert-warning text-center mt-4">
                        No products available.
                    </div>
                {{/if}}
            </div>
        </div>
    </div>
</section>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const filterForm = document.getElementById('filter-form');
        const sortDropdown = document.getElementById('sortDropdown');
        const productList = document.querySelector('.row.row-cols-1.row-cols-md-2.row-cols-lg-3.g-4');
        const paginationContainer = document.querySelector('.pagination');

        // Function to fetch products via AJAX
        const fetchProducts = async (params) => {
            try {
                const query = new URLSearchParams(params).toString();
                const response = await fetch(`/product/api/products?${query}`, {
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                });
                if (!response.ok) throw new Error('Network response was not ok');
                const data = await response.json();
                return data;
            } catch (error) {
                console.error('Error fetching products:', error);
                alert('Error fetching products.');
            }
        };
        function formatCurrencyVND(amount) {
            return amount.toLocaleString('vi-VN', { style: 'currency', currency: 'VND' });
        }
        // Function to render products
        const renderProducts = (products) => {
            productList.innerHTML = '';
            products.forEach(product => {
                const productCard = `
                    <div class="col">
                        <div class="card shadow-sm h-100 border-0">
                            <img src="${product.images[0]}" alt="${product.name}" class="card-img-top img-fluid">
                            <div class="card-body">
                                <h5 class="card-title text-primary">${product.name}</h5>
                                <p class="card-text text-muted mb-1">Price: <span class="fw-bold">${formatCurrencyVND(product.salePrice)}</span></p>
                            </div>
                            <div class="card-footer bg-light d-flex justify-content-between align-items-center">
                                <a href="/product/update/${product.slug}" class="btn btn-outline-primary btn-sm">
                                    <i class="bi bi-pencil"></i> Edit
                                </a>
                                <form action="/product/delete/${product.slug}" method="POST" style="margin: 0;">
                                    <button type="submit" class="btn btn-outline-danger btn-sm">
                                        <i class="bi bi-trash"></i> Delete
                                    </button>
                                </form>
                            </div>
                        </div>
                    </div>
                `;
                productList.insertAdjacentHTML('beforeend', productCard);
            });
        };

        // Function to render pagination
        const renderPagination = (currentPage, totalPages, params) => {
            const pagination = document.querySelector('.pagination');
            if (!pagination) return;

            pagination.innerHTML = '';

            // Previous Button
            const prevClass = currentPage > 1 ? '' : 'disabled';
            const prevPage = currentPage > 1 ? currentPage - 1 : 1;
            const prevButton = `
                <li class="page-item ${prevClass}">
                    <a class="page-link" href="#" data-page="${prevPage}" aria-label="Previous">
                        <span aria-hidden="true">&laquo;</span>
                    </a>
                </li>
            `;
            pagination.insertAdjacentHTML('beforeend', prevButton);

            // Page Numbers
            for (let i = 1; i <= totalPages; i++) {
                const activeClass = i === currentPage ? 'active' : '';
                const pageButton = `
                    <li class="page-item ${activeClass}">
                        <a class="page-link" href="#" data-page="${i}">${i}</a>
                    </li>
                `;
                pagination.insertAdjacentHTML('beforeend', pageButton);
            }

            // Next Button
            const nextClass = currentPage < totalPages ? '' : 'disabled';
            const nextPage = currentPage < totalPages ? currentPage + 1 : totalPages;
            const nextButton = `
                <li class="page-item ${nextClass}">
                    <a class="page-link" href="#" data-page="${nextPage}" aria-label="Next">
                        <span aria-hidden="true">&raquo;</span>
                    </a>
                </li>
            `;
            pagination.insertAdjacentHTML('beforeend', nextButton);
        };

        // Function to get current filter and sort parameters
        const getFilters = () => {
            const formData = new FormData(filterForm);
            const params = {};
            formData.forEach((value, key) => {
                if (params[key]) {
                    if (Array.isArray(params[key])) {
                        params[key].push(value);
                    } else {
                        params[key] = [params[key], value];
                    }
                } else {
                    params[key] = value;
                }
            });

            // Get sort parameter from dropdown
            const urlParams = new URLSearchParams(window.location.search);
            const sort = urlParams.get('sort');
            if (sort) params.sort = sort;

            return params;
        };

        // Event listener for filter form submission
        filterForm.addEventListener('submit', async function (e) {
            e.preventDefault();
            const params = getFilters();
            params.page = 1; // Reset to first page on new filter
            const data = await fetchProducts(params);
            if (data) {
                renderProducts(data.products);
                renderPagination(data.currentPage, data.totalPages, params);
            }
        });

        // Event delegation for pagination links
        document.addEventListener('click', async function (e) {
            if (e.target.closest('.page-link')) {
                e.preventDefault();
                const page = e.target.closest('.page-link').dataset.page;
                if (!page) return;

                const params = getFilters();
                params.page = page;

                const data = await fetchProducts(params);
                if (data) {
                    renderProducts(data.products);
                    renderPagination(data.currentPage, data.totalPages, params);
                }
            }
        });

        // Event listener for sort dropdown
        sortDropdown.addEventListener('click', async function (e) {
            if (e.target.tagName === 'A') {
                e.preventDefault();
                const sort = e.target.getAttribute('href').split('sort=')[1].split('&')[0];
                const params = getFilters();
                params.sort = sort;
                params.page = 1; // Reset to first page on sort

                const data = await fetchProducts(params);
                if (data) {
                    renderProducts(data.products);
                    renderPagination(data.currentPage, data.totalPages, params);
                }
            }
        });

        // Initial load
        (async () => {
            const params = getFilters();
            const data = await fetchProducts(params);
            if (data) {
                renderProducts(data.products);
                renderPagination(data.currentPage, data.totalPages, params);
            }
        })();
    });
</script>
